apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: printnet
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "alert_rules.yml"

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'printnet-api'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - printnet
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: printnet-api-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: http

    - job_name: 'printnet-auth'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - printnet
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: printnet-auth-service

    - job_name: 'printnet-orders'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - printnet
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: printnet-orders-service

    - job_name: 'nginx-loadbalancer'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - printnet
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: nginx-loadbalancer-service

  alert_rules.yml: |
    groups:
    - name: printnet.rules
      rules:
      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total[5m]) * 100 > 80
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is above 80% for more than 2 minutes"

      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) * 100 > 85
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is above 85% for more than 2 minutes"

      - alert: PodRestartingTooOften
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Pod is restarting too often"
          description: "Pod {{ $labels.pod }} is restarting too frequently"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: printnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus
          command:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.console.libraries=/usr/share/prometheus/console_libraries
            - --web.console.templates=/usr/share/prometheus/consoles
            - --storage.tsdb.retention.time=15d
            - --web.enable-lifecycle
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: printnet
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: printnet
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.1.0
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-kubernetes-app"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
      volumes:
        - name: grafana-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: printnet
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
  type: LoadBalancer
